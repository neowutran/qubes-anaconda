From ff4e4dc494fdc69e27ab86cfac7e3d9a72603abd Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fr=C3=A9d=C3=A9ric=20Pierret=20=28fepitre=29?=
 <frederic.pierret@qubes-os.org>
Date: Wed, 25 Mar 2020 16:59:50 +0100
Subject: [PATCH] automatic_partitioning: rename 'thin' to 'thin_volume' same
 as blivet

---
 .../partitioning/automatic/automatic_partitioning.py |  6 +++---
 .../modules/storage/partitioning/automatic/utils.py  |  2 +-
 pyanaconda/storage/partspec.py                       | 12 ++++++------
 3 files changed, 10 insertions(+), 10 deletions(-)

diff --git a/pyanaconda/modules/storage/partitioning/automatic/utils.py b/pyanaconda/modules/storage/partitioning/automatic/utils.py
index 1f62472..c4eb0e3 100644
--- a/pyanaconda/modules/storage/partitioning/automatic/utils.py
+++ b/pyanaconda/modules/storage/partitioning/automatic/utils.py
@@ -277,7 +277,7 @@ def get_default_partitioning():
             mountpoint=name if not swap else None,
             fstype=None if not swap else "swap",
             lv=True,
-            thin=not swap,
+            thin_volume=not swap,
             btr=not swap,
             size=attrs.get("min") or attrs.get("size"),
             max_size=attrs.get("max"),
@@ -486,7 +486,7 @@ def schedule_volumes(storage, devices, scheme, requests, encrypted=False):
     for request in requests:
         btr = bool(scheme == AUTOPART_TYPE_BTRFS and request.btr)
         lv = bool(scheme in (AUTOPART_TYPE_LVM, AUTOPART_TYPE_LVM_THINP) and request.lv)
-        thinlv = bool(scheme == AUTOPART_TYPE_LVM_THINP and request.lv and request.thin)
+        thinlv = bool(scheme == AUTOPART_TYPE_LVM_THINP and request.lv and request.thin_volume)
 
         if thinlv and pool is None:
             # create a single thin pool in the vg
diff --git a/pyanaconda/modules/storage/partitioning/specification.py b/pyanaconda/modules/storage/partitioning/specification.py
index 360b1f2..fc738f5 100644
--- a/pyanaconda/modules/storage/partitioning/specification.py
+++ b/pyanaconda/modules/storage/partitioning/specification.py
@@ -26,7 +26,7 @@ from pykickstart.constants import AUTOPART_TYPE_PLAIN, AUTOPART_TYPE_BTRFS, AUTO
 class PartSpec(object):
 
     def __init__(self, mountpoint=None, fstype=None, size=None, max_size=None,
-                 grow=False, btr=False, lv=False, thin=False, weight=0,
+                 grow=False, btr=False, lv=False, thin_volume=False, weight=0,
                  required_space=0, encrypted=False, schemes=None):
         """ Create a new storage specification.  These are used to specify
             the default partitioning layout as an object before we have the
@@ -37,7 +37,7 @@ class PartSpec(object):
                    it will be allocated as a partition.
             lv -- Should this be allocated as a logical volume?  If not,
                   it will be allocated as a partition.
-            thin -- Should this be allocated as a thin logical volume if it is
+            thin_volume -- Should this be allocated as a thin logical volume if it is
                     being allocated as a logical volume?
             weight -- An integer that modifies the sort algorithm for partition
                       requests.  A larger value means the partition will end up
@@ -65,7 +65,7 @@ class PartSpec(object):
         self.grow = grow
         self.lv = lv
         self.btr = btr
-        self.thin = thin
+        self.thin_volume = thin_volume
         self.weight = weight
         self.required_space = required_space
         self.encrypted = encrypted
@@ -75,7 +75,7 @@ class PartSpec(object):
     def _to_string(self):
         s = ("%(type)s instance (%(id)s) -- \n"
              "  mountpoint = %(mountpoint)s  lv = %(lv)s"
-             "  thin = %(thin)s  btrfs = %(btrfs)s\n"
+             "  thin_volume = %(thin_volume)s  btrfs = %(btrfs)s\n"
              "  weight = %(weight)s  fstype = %(fstype)s  encrypted = %(enc)s\n"
              "  size = %(size)s  max_size = %(max_size)s  grow = %(grow)s\n"
              "  required_space = %(required_space)s\n"
@@ -84,7 +84,7 @@ class PartSpec(object):
               "mountpoint": self.mountpoint, "lv": self.lv, "btrfs": self.btr,
               "weight": self.weight, "fstype": self.fstype, "size": self.size,
               "enc": self.encrypted, "max_size": self.max_size, "grow": self.grow,
-              "thin": self.thin, "required_space": self.required_space,
+              "thin_volume": self.thin_volume, "required_space": self.required_space,
               "schemes": self.schemes})
 
         return s
@@ -125,7 +125,7 @@ class PartSpec(object):
         if not self.is_lvm_volume(scheme):
             return False
 
-        return scheme == AUTOPART_TYPE_LVM_THINP and self.thin
+        return scheme == AUTOPART_TYPE_LVM_THINP and self.thin_volume
 
     def is_btrfs_subvolume(self, scheme):
         """Is the specified device a Btrfs subvolume in the given scheme?
-- 
2.25.2
