diff --git a/pyanaconda/modules/storage/partitioning/automatic/utils.py b/pyanaconda/modules/storage/partitioning/automatic/utils.py
index 56dcbd0..0391b26 100644
--- a/pyanaconda/modules/storage/partitioning/automatic/utils.py
+++ b/pyanaconda/modules/storage/partitioning/automatic/utils.py
@@ -257,6 +257,25 @@ def schedule_implicit_partitions(storage, disks, scheme, encrypted=False, luks_f
 
 
 
+QUBESOS_BTRFS_PARTITIONING = [
+    PartSpec(
+        fstype="swap",
+        grow=False,
+        lv=True,
+        encrypted=True
+    ),
+    PartSpec(
+        mountpoint="/",
+        size=Size("10GiB"),
+        required_space=Size("10GiB"),
+        grow=True,
+        btr=True,
+        lv=True,
+        thin_volume=True,
+        encrypted=True
+    )
+]
+
 
 QUBESOS_PARTITIONING = [
     PartSpec(
@@ -520,16 +539,15 @@ def schedule_volumes(storage, devices, scheme, requests, encrypted=False):
     #
     # Second pass, for LVs only.
     pool = None
-    
-    
     request_thin_pool = False
     request_thin_volume = False
-    for request in requests:
-        if request.thin_pool:
-            request_thin_pool = True
+    if scheme in (AUTOPART_TYPE_LVM, AUTOPART_TYPE_LVM_THINP):
+        for request in requests:
+            if request.thin_pool:
+                request_thin_pool = True
 
-        if request.thin_volume:
-            request_thin_volume = True
+            if request.thin_volume:
+                request_thin_volume = True
 
     if request_thin_volume and not request_thin_pool:
         # create only one default thin pool if no thin_pool is requested
diff --git a/pyanaconda/modules/storage/partitioning/automatic/utils.py b/pyanaconda/modules/storage/partitioning/automatic/utils.py
index b9b1802..8674fa4 100644
--- a/pyanaconda/modules/storage/partitioning/automatic/utils.py
+++ b/pyanaconda/modules/storage/partitioning/automatic/utils.py
@@ -293,7 +293,7 @@ QUBESOS_PARTITIONING = [
 
 
 
-def get_default_partitioning():
+def get_default_partitioning(scheme=None):
     """Get the default partitioning requests.
 
     :return: a list of partitioning specs
@@ -301,9 +301,15 @@ def get_default_partitioning():
     # Get the platform-specific partitioning.
     partitioning = list(platform.partitions)
 
+    if scheme == AUTOPART_TYPE_BTRFS:
+        return partitioning + QUBESOS_BTRFS_PARTITIONING
+    else:
+        return partitioning + QUBESOS_PARTITIONING
+
+
     # Get the product-specific partitioning.
-    for attrs in conf.storage.default_partitioning:
-        partitioning.append(get_part_spec(attrs))
+    #for attrs in conf.storage.default_partitioning:
+    #    partitioning.append(get_part_spec(attrs))
 
     return partitioning
 
diff --git a/pyanaconda/modules/storage/partitioning/automatic/automatic_partitioning.py b/pyanaconda/modules/storage/partitioning/automatic/automatic_partitioning.py
index 5d8c4da..18667d3 100644
--- a/pyanaconda/modules/storage/partitioning/automatic/automatic_partitioning.py
+++ b/pyanaconda/modules/storage/partitioning/automatic/automatic_partitioning.py
@@ -134,7 +134,7 @@ class AutomaticPartitioningTask(NonInteractivePartitioningTask):
         swap = None
 
         # Create partitioning specs based on the default configuration.
-        for spec in get_default_partitioning():
+        for spec in get_default_partitioning(scheme=scheme):
             # Skip mount points excluded from the chosen scheme.
             if spec.schemes and scheme not in spec.schemes:
                 continue
