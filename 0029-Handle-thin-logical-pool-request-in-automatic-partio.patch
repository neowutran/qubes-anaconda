diff --git a/pyanaconda/modules/storage/partitioning/automatic/utils.py b/pyanaconda/modules/storage/partitioning/automatic/utils.py
index 1f62472..3dec5b0 100644
--- a/pyanaconda/modules/storage/partitioning/automatic/utils.py
+++ b/pyanaconda/modules/storage/partitioning/automatic/utils.py
@@ -256,6 +256,43 @@ def schedule_implicit_partitions(storage, disks, scheme, encrypted=False, luks_f
     return devs
 
 
+
+
+QUBESOS_PARTITIONING = [
+    PartSpec(
+        fstype="swap",
+        grow=False,
+        lv=True,
+        encrypted=True
+    ),
+    PartSpec(
+        size=Size("20GiB"),
+        grow=False,
+        lv=True,
+        thin_pool=True,
+        encrypted=True
+    ),
+    PartSpec(
+        mountpoint="/",
+        size=Size("1GiB"),
+        required_space=Size("10GiB"),
+        grow=True,
+        lv=True,
+        thin_volume=True,
+        encrypted=True
+    ),
+    PartSpec(
+        size=Size("20GiB"),
+        grow=True,
+        lv=True,
+        thin_pool=True,
+        encrypted=True
+    )
+]
+
+
+
+
 def get_default_partitioning():
     """Get the default partitioning requests.
 
@@ -483,19 +520,37 @@ def schedule_volumes(storage, devices, scheme, requests, encrypted=False):
     #
     # Second pass, for LVs only.
     pool = None
+    
+    
+    request_thin_pool = False
+    request_thin_volume = False
+    for request in requests:
+        if request.thin_pool:
+            request_thin_pool = True
+
+        if request.thin_volume:
+            request_thin_volume = True
+
+    if request_thin_volume and not request_thin_pool:
+        # create only one default thin pool if no thin_pool is requested
+        pool = new_volume(parents=[container], thin_pool=True, grow=True)
+        storage.create_device(pool)
+
+    if pool or request_thin_pool:
+        # make sure VG reserves space for the pool to grow if needed
+        container.thpool_reserve = DEFAULT_THPOOL_RESERVE
+
+    # TODO: Ensure requests are properly ordered:
+    #  VG -> Static LV
+    #  VG -> Thin Pool - > Thin Volume
+    
+    
     for request in requests:
         btr = bool(scheme == AUTOPART_TYPE_BTRFS and request.btr)
         lv = bool(scheme in (AUTOPART_TYPE_LVM, AUTOPART_TYPE_LVM_THINP) and request.lv)
+        thinlp = bool(scheme == AUTOPART_TYPE_LVM_THINP and request.lv and request.thin_pool)
         thinlv = bool(scheme == AUTOPART_TYPE_LVM_THINP and request.lv and request.thin_volume)
 
-        if thinlv and pool is None:
-            # create a single thin pool in the vg
-            pool = storage.new_lv(parents=[container], thin_pool=True, grow=True)
-            storage.create_device(pool)
-
-            # make sure VG reserves space for the pool to grow if needed
-            container.thpool_reserve = DEFAULT_THPOOL_RESERVE
-
         if not btr and not lv and not thinlv:
             continue
 
@@ -504,32 +559,44 @@ def schedule_volumes(storage, devices, scheme, requests, encrypted=False):
            request.required_space and request.required_space > container.size:
             continue
 
-        if request.fstype is None:
+        if request.fstype is None and not thinlp:
+
             if btr:
                 # btrfs volumes can only contain btrfs filesystems
                 request.fstype = "btrfs"
             else:
                 request.fstype = storage.default_fstype
 
-        kwargs = {"mountpoint": request.mountpoint,
-                  "fmt_type": request.fstype}
-        if lv or thinlv:
+        kwargs = {
+            "mountpoint": request.mountpoint,
+            "fmt_type": request.fstype
+        }
+        if lv or thinlp or thinlv:
             if thinlv:
+                # A previous request should have created pool
+                # or default pool will be used
                 parents = [pool]
             else:
                 parents = [container]
 
-            kwargs.update({"parents": parents,
-                           "grow": request.grow,
-                           "maxsize": request.max_size,
-                           "size": request.size,
-                           "thin_volume": thinlv})
+            kwargs.update({
+                "parents": parents,
+                "grow": request.grow,
+                "maxsize": request.max_size,
+                "size": request.size,
+                "thin_pool": thinlp,
+                "thin_volume": thinlv
+            })
         else:
-            kwargs.update({"parents": [container],
-                           "size": request.size,
-                           "subvol": True})
+            kwargs.update({
+                "parents": [container],
+                "size": request.size,
+                "subvol": True
+            })
 
         dev = new_volume(**kwargs)
+        if thinlp:
+            pool = dev
 
         # schedule the device for creation
         storage.create_device(dev)
diff --git a/pyanaconda/modules/storage/partitioning/specification.py b/pyanaconda/modules/storage/partitioning/specification.py
index fc738f5..328dece 100644
--- a/pyanaconda/modules/storage/partitioning/specification.py
+++ b/pyanaconda/modules/storage/partitioning/specification.py
@@ -26,7 +26,7 @@ from pykickstart.constants import AUTOPART_TYPE_PLAIN, AUTOPART_TYPE_BTRFS, AUTO
 class PartSpec(object):
 
     def __init__(self, mountpoint=None, fstype=None, size=None, max_size=None,
-                 grow=False, btr=False, lv=False, thin_volume=False, weight=0,
+                 grow=False, btr=False, lv=False, thin_pool=False, thin_volume=False, weight=0,
                  required_space=0, encrypted=False, schemes=None):
         """ Create a new storage specification.  These are used to specify
             the default partitioning layout as an object before we have the
@@ -39,6 +39,8 @@ class PartSpec(object):
                   it will be allocated as a partition.
             thin_volume -- Should this be allocated as a thin logical volume if it is
                     being allocated as a logical volume?
+            thin_pool -- Should this be allocated as a thin logical pool
+                  if it is being allocated as a logical volume?
             weight -- An integer that modifies the sort algorithm for partition
                       requests.  A larger value means the partition will end up
                       closer to the front of the disk.  This is mainly used to
@@ -65,6 +67,7 @@ class PartSpec(object):
         self.grow = grow
         self.lv = lv
         self.btr = btr
+        self.thin_pool = thin_pool
         self.thin_volume = thin_volume
         self.weight = weight
         self.required_space = required_space
@@ -74,8 +77,8 @@ class PartSpec(object):
     # Force str and unicode types in case any of the properties are unicode
     def _to_string(self):
         s = ("%(type)s instance (%(id)s) -- \n"
-             "  mountpoint = %(mountpoint)s  lv = %(lv)s"
-             "  thin_volume = %(thin_volume)s  btrfs = %(btrfs)s\n"
+             "  mountpoint = %(mountpoint)s  lv = %(lv)s btrfs = %(btrfs)s"
+             "  thin_pool = %(thin_pool)s thin_volume = %(thin_volume)s\n"
              "  weight = %(weight)s  fstype = %(fstype)s  encrypted = %(enc)s\n"
              "  size = %(size)s  max_size = %(max_size)s  grow = %(grow)s\n"
              "  required_space = %(required_space)s\n"
@@ -84,7 +87,7 @@ class PartSpec(object):
               "mountpoint": self.mountpoint, "lv": self.lv, "btrfs": self.btr,
               "weight": self.weight, "fstype": self.fstype, "size": self.size,
               "enc": self.encrypted, "max_size": self.max_size, "grow": self.grow,
-              "thin_volume": self.thin_volume, "required_space": self.required_space,
+              "thin_volume": self.thin_volume, "thin_pool": self.thin_pool, "required_space": self.required_space,
               "schemes": self.schemes})
 
         return s
