From 9182d2b7881dcbb30ae4815003449d1624385338 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Fr=C3=A9d=C3=A9ric=20Pierret=20=28fepitre=29?=
 <frederic.pierret@qubes-os.org>
Date: Sun, 15 Dec 2019 17:27:02 +0100
Subject: [PATCH] Simplify USER configuration spoke

---
 pyanaconda/ui/gui/spokes/user.glade |  94 ++-------
 pyanaconda/ui/gui/spokes/user.py    | 286 +---------------------------
 2 files changed, 19 insertions(+), 361 deletions(-)

diff --git a/pyanaconda/ui/gui/spokes/user.glade b/pyanaconda/ui/gui/spokes/user.glade
index 4783a9f..84f359c 100644
--- a/pyanaconda/ui/gui/spokes/user.glade
+++ b/pyanaconda/ui/gui/spokes/user.glade
@@ -55,24 +55,6 @@
                     <property name="can-focus">False</property>
                     <property name="row-spacing">8</property>
                     <property name="column-spacing">9</property>
-                    <child>
-                      <object class="GtkLabel" id="label1">
-                        <property name="visible">True</property>
-                        <property name="can-focus">False</property>
-                        <property name="xpad">10</property>
-                        <property name="label" translatable="yes" context="GUI|User">_Full name</property>
-                        <property name="use-underline">True</property>
-                        <property name="mnemonic-widget">fullname_entry</property>
-                        <property name="xalign">1</property>
-                        <attributes>
-                          <attribute name="weight" value="bold"/>
-                        </attributes>
-                      </object>
-                      <packing>
-                        <property name="left-attach">0</property>
-                        <property name="top-attach">0</property>
-                      </packing>
-                    </child>
                     <child>
                       <object class="GtkLabel" id="label2">
                         <property name="visible">True</property>
@@ -91,23 +73,6 @@
                         <property name="top-attach">1</property>
                       </packing>
                     </child>
-                    <child>
-                      <object class="GtkEntry" id="fullname_entry">
-                        <property name="visible">True</property>
-                        <property name="can-focus">True</property>
-                        <property name="caps-lock-warning">False</property>
-                        <signal name="changed" handler="on_full_name_changed" swapped="no"/>
-                        <child internal-child="accessible">
-                          <object class="AtkObject" id="fullname_entry-atkobject">
-                            <property name="AtkObject::accessible-name" translatable="yes">Full Name</property>
-                          </object>
-                        </child>
-                      </object>
-                      <packing>
-                        <property name="left-attach">1</property>
-                        <property name="top-attach">0</property>
-                      </packing>
-                    </child>
                     <child>
                       <object class="GtkEntry" id="username_entry">
                         <property name="visible">True</property>
@@ -200,23 +165,6 @@
                         <property name="top-attach">7</property>
                       </packing>
                     </child>
-                    <child>
-                      <object class="GtkCheckButton" id="password_required_checkbox">
-                        <property name="label" translatable="yes" context="GUI|User">_Require a password to use this account</property>
-                        <property name="visible">True</property>
-                        <property name="can-focus">True</property>
-                        <property name="receives-default">False</property>
-                        <property name="use-underline">True</property>
-                        <property name="xalign">0</property>
-                        <property name="active">True</property>
-                        <property name="draw-indicator">True</property>
-                        <signal name="toggled" handler="on_password_required_toggled" swapped="no"/>
-                      </object>
-                      <packing>
-                        <property name="left-attach">1</property>
-                        <property name="top-attach">4</property>
-                      </packing>
-                    </child>
                     <child>
                       <object class="GtkBox" id="box2">
                         <property name="visible">True</property>
@@ -259,43 +207,13 @@
                         <property name="top-attach">6</property>
                       </packing>
                     </child>
-                    <child>
-                      <object class="GtkCheckButton" id="admin_checkbox">
-                        <property name="label" translatable="yes" context="GUI|User">Add ad_ministrative privileges to this user account (wheel group membership)</property>
-                        <property name="visible">True</property>
-                        <property name="can-focus">True</property>
-                        <property name="receives-default">False</property>
-                        <property name="active">True</property>
-                        <property name="tooltip-text" translatable="yes" context="GUI|User">Allow this user to run the 'sudo' command.</property>
-                        <property name="use-underline">True</property>
-                        <property name="xalign">0</property>
-                        <property name="draw-indicator">True</property>
-                        <signal name="toggled" handler="on_admin_toggled" swapped="no"/>
-                      </object>
-                      <packing>
-                        <property name="left-attach">1</property>
-                        <property name="top-attach">3</property>
-                      </packing>
-                    </child>
                     <child>
                       <!-- n-columns=3 n-rows=3 -->
                       <object class="GtkGrid" id="grid2">
                         <property name="visible">True</property>
                         <property name="can-focus">False</property>
                         <child>
-                          <object class="GtkButton" id="advanced_button">
-                            <property name="label" translatable="yes" context="GUI|User">_Advanced...</property>
-                            <property name="visible">True</property>
-                            <property name="sensitive">False</property>
-                            <property name="can-focus">True</property>
-                            <property name="receives-default">True</property>
-                            <property name="use-underline">True</property>
-                            <signal name="clicked" handler="on_advanced_clicked" swapped="no"/>
-                          </object>
-                          <packing>
-                            <property name="left-attach">0</property>
-                            <property name="top-attach">0</property>
-                          </packing>
+                          <placeholder/>
                         </child>
                         <child>
                           <placeholder/>
@@ -372,6 +290,18 @@
                     <child>
                       <placeholder/>
                     </child>
+                    <child>
+                      <placeholder/>
+                    </child>
+                    <child>
+                      <placeholder/>
+                    </child>
+                    <child>
+                      <placeholder/>
+                    </child>
+                    <child>
+                      <placeholder/>
+                    </child>
                   </object>
                   <packing>
                     <property name="expand">True</property>
diff --git a/pyanaconda/ui/gui/spokes/user.py b/pyanaconda/ui/gui/spokes/user.py
index e107afe..8a9fc1c 100644
--- a/pyanaconda/ui/gui/spokes/user.py
+++ b/pyanaconda/ui/gui/spokes/user.py
@@ -41,177 +41,7 @@ from pyanaconda.core.regexes import GROUPLIST_FANCY_PARSE
 from pyanaconda.anaconda_loggers import get_module_logger
 log = get_module_logger(__name__)
 
-__all__ = ["UserSpoke", "AdvancedUserDialog"]
-
-
-class AdvancedUserDialog(GUIObject, GUIDialogInputCheckHandler):
-    """
-       .. inheritance-diagram:: AdvancedUserDialog
-          :parts: 3
-    """
-    builderObjects = ["advancedUserDialog", "uid", "gid"]
-    mainWidgetName = "advancedUserDialog"
-    uiFile = "spokes/advanced_user.glade"
-
-    def _validateGroups(self, inputcheck):
-        groups_string = self.get_input(inputcheck.input_obj)
-
-        # Pass if the string is empty
-        if not groups_string:
-            return InputCheck.CHECK_OK
-
-        # Check each group name in the list
-        for group in groups_string.split(","):
-            group_name = GROUPLIST_FANCY_PARSE.match(group).group('name')
-            valid, message = check_groupname(group_name)
-            if not valid:
-                return message or _("Invalid group name.")
-
-        return InputCheck.CHECK_OK
-
-    def __init__(self, user_spoke):
-        GUIObject.__init__(self, user_spoke)
-
-        saveButton = self.builder.get_object("save_button")
-        GUIDialogInputCheckHandler.__init__(self, saveButton)
-
-        self._user_spoke = user_spoke
-
-        # Track whether the user has requested a home directory other
-        # than the default. This way, if the home directory is left as
-        # the default, the default will change if the username changes.
-        # Otherwise, once the directory is set it stays that way.
-        self._origHome = None
-
-    def _grabObjects(self):
-        self._cUid = self.builder.get_object("c_uid")
-        self._cGid = self.builder.get_object("c_gid")
-        self._tHome = self.builder.get_object("t_home")
-        self._tGroups = self.builder.get_object("t_groups")
-        self._spinUid = self.builder.get_object("spin_uid")
-        self._spinGid = self.builder.get_object("spin_gid")
-        self._uid = self.builder.get_object("uid")
-        self._gid = self.builder.get_object("gid")
-
-    def initialize(self):
-        GUIObject.initialize(self)
-
-        self._grabObjects()
-
-        # Validate the group input box
-        self.add_check(self._tGroups, self._validateGroups)
-        # Send ready signal to main event loop
-        hubQ.send_ready(self.__class__.__name__)
-
-    @property
-    def user(self):
-        """Shortcut to user data from the user spoke."""
-        return self._user_spoke.user
-
-    def refresh(self):
-        # start be reloading the user data from the user spoke
-        if self.user.homedir:
-            homedir = self.user.homedir
-        elif self.user.name:
-            homedir = "/home/" + self.user.name
-
-        self._tHome.set_text(homedir)
-        self._origHome = homedir
-
-        self._cUid.set_active(self.user.get_uid() is not None)
-        self._cGid.set_active(self.user.get_gid() is not None)
-
-        self._spinUid.update()
-        self._spinGid.update()
-
-        self._tGroups.set_text(", ".join(self.user.groups))
-
-    def apply(self):
-        # Copy data from the UI back to the user data object
-        homedir = self._tHome.get_text()
-
-        # If the user cleared the home directory, revert back to the
-        # default
-        if not homedir:
-            self.user.homedir = ""
-        # If the user modified the home directory input, save that the
-        # home directory has been modified and use the value.
-        elif self._origHome != homedir:
-            if not os.path.isabs(homedir):
-                homedir = "/" + homedir
-            self.user.homedir = homedir
-
-        # Otherwise leave the home directory alone. If the home
-        # directory is currently the default value, the next call
-        # to refresh() will update the input text to reflect
-        # changes in the username.
-
-        if self._cUid.get_active():
-            self.user.set_uid(int(self._uid.get_value()))
-        else:
-            self.user.set_uid(None)
-
-        if self._cGid.get_active():
-            self.user.set_gid(int(self._gid.get_value()))
-        else:
-            self.user.set_gid(None)
-
-        # ''.split(',') returns [''] instead of [], which is not what we want
-        self.user.groups = [''.join(g.split()) for g in self._tGroups.get_text().split(",") if g]
-
-        # Send ready signal to main event loop
-        hubQ.send_ready(self.__class__.__name__)
-
-    def run(self):
-        self.window.show()
-        while True:
-            rc = self.window.run()
-
-            #OK clicked
-            if rc == 1:
-                # Input checks pass
-                if self.on_ok_clicked():
-                    self.apply()
-                    break
-                # Input checks fail, try again
-                else:
-                    continue
-
-            #Cancel clicked, window destroyed...
-            else:
-                break
-
-        self.window.hide()
-        return rc
-
-    def on_uid_checkbox_toggled(self, togglebutton, data=None):
-        # Set the UID spinner sensitivity based on the UID checkbox
-        self._spinUid.set_sensitive(togglebutton.get_active())
-
-    def on_gid_checkbox_toggled(self, togglebutton, data=None):
-        # Same as above, for GID
-        self._spinGid.set_sensitive(togglebutton.get_active())
-
-    def on_uid_mnemonic_activate(self, widget, group_cycling, user_data=None):
-        # If this is the only widget with the mnemonic (group_cycling is False),
-        # and the checkbox is not currently toggled, toggle the checkbox and
-        # then set the focus to the UID spinner
-        if not group_cycling and not widget.get_active():
-            widget.set_active(True)
-            self._spinUid.grab_focus()
-            return True
-
-        # Otherwise just use the default signal handler
-        return False
-
-    def on_gid_mnemonic_activate(self, widget, group_cycling, user_data=None):
-        # Same as above, but for GID
-        if not group_cycling and not widget.get_active():
-            widget.set_active(True)
-            self._spinGid.grab_focus()
-            return True
-
-        return False
+__all__ = ["UserSpoke"]
 
 
 class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler):
@@ -222,7 +52,7 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler):
     builderObjects = ["userCreationWindow"]
 
     mainWidgetName = "userCreationWindow"
-    focusWidgetName = "fullname_entry"
+    focusWidgetName = "username_entry"
     uiFile = "spokes/user.glade"
     category = UserSettingsCategory
     icon = "avatar-default-symbolic"
@@ -281,15 +111,9 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler):
         # gather references to relevant GUI objects
 
         # entry fields
-        self._fullname_entry = self.builder.get_object("fullname_entry")
         self._username_entry = self.builder.get_object("username_entry")
         self._password_entry = self.builder.get_object("password_entry")
         self._password_confirmation_entry = self.builder.get_object("password_confirmation_entry")
-        # check boxes
-        self._admin_checkbox = self.builder.get_object("admin_checkbox")
-        self._password_required_checkbox = self.builder.get_object("password_required_checkbox")
-        # advanced user configration dialog button
-        self._advanced_button = self.builder.get_object("advanced_button")
         # password checking status bar & label
         self._password_bar = self.builder.get_object("password_bar")
         self._password_label = self.builder.get_object("password_label")
@@ -317,7 +141,6 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler):
 
         # username and full name checks
         self._username_check = input_checking.UsernameCheck()
-        self._fullname_check = input_checking.FullnameCheck()
         # empty username is considered a success so that the user can leave
         # the spoke without filling it in
         self._username_check.success_if_username_empty = True
@@ -343,7 +166,6 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler):
         # 3) is the password valid according to the current password checking policy ?
         # 4) is the password free of non-ASCII characters ?
         self.checker.add_check(self._username_check)
-        self.checker.add_check(self._fullname_check)
         self.checker.add_check(self._empty_check)
         self.checker.add_check(self._confirm_check)
         self.checker.add_check(self._validity_check)
@@ -370,12 +192,6 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler):
             # Policy is that a non-empty password is required
             self.password_required = True
 
-        if not self.checker.policy.allow_empty:
-            # User isn't allowed to change whether password is required or not
-            self.password_required_checkbox.set_sensitive(False)
-
-        self._advanced_user_dialog = AdvancedUserDialog(self)
-        self._advanced_user_dialog.initialize()
 
         # set the visibility of the password entries
         # - without this the password visibility toggle icon will
@@ -398,30 +214,6 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler):
     def username(self, new_username):
         self.username_entry.set_text(new_username)
 
-    @property
-    def fullname_entry(self):
-        return self._fullname_entry
-
-    @property
-    def fullname(self):
-        return self.fullname_entry.get_text()
-
-    @fullname.setter
-    def fullname(self, new_fullname):
-        self.fullname_entry.set_text(new_fullname)
-
-    @property
-    def password_required_checkbox(self):
-        return self._password_required_checkbox
-
-    @property
-    def password_required(self):
-        return self.password_required_checkbox.get_active()
-
-    @password_required.setter
-    def password_required(self, value):
-        self.password_required_checkbox.set_active(value)
-
     @property
     def user(self):
         """The user that is manipulated by the User spoke.
@@ -443,8 +235,6 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler):
         self._user_list = get_user_list(self._users_module, add_default=True, add_if_not_empty=self._requested_user_cleared)
 
         self.username = self.user.name
-        self.fullname = self.user.gecos
-        self._admin_checkbox.set_active(self.user.has_admin_priviledges())
 
         # rerun checks so that we have a correct status message, if any
         self.checker.run_checks()
@@ -467,22 +257,13 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler):
     def apply(self):
         # set the password only if the user enters anything to the text entry
         # this should preserve the kickstart based password
-        if self.password_required:
-            if self.password:
-                self.password_kickstarted = False
-                self.user.password = crypt_password(self.password)
-                self.user.is_crypted = True
-                self.remove_placeholder_texts()
-
-        # reset the password when the user unselects it
-        else:
-            self.remove_placeholder_texts()
-            self.user.password = ""
-            self.user.is_crypted = False
+        if self.password:
             self.password_kickstarted = False
+            self.user.password = crypt_password(self.password)
+            self.user.is_crypted = True
+            self.remove_placeholder_texts()
 
         self.user.name = self.username
-        self.user.gecos = self.fullname
 
         # We make it possible to clear users requested from kickstart (or DBus API)
         # during an interactive installation. This is done by setting their name
@@ -507,22 +288,6 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler):
     def completed(self):
         return bool(get_user_list(self._users_module))
 
-    def on_password_required_toggled(self, togglebutton=None, data=None):
-        """Called by Gtk callback when the "Use password" check
-        button is toggled. It will make password entries in/sensitive."""
-        password_is_required = togglebutton.get_active()
-        self.password_entry.set_sensitive(password_is_required)
-        self.password_confirmation_entry.set_sensitive(password_is_required)
-        self._password_is_required = password_is_required
-        # also disable/enable corresponding password checks
-        self._empty_check.skip = not password_is_required or not self.username
-        self._confirm_check.skip = not password_is_required
-        self._validity_check.skip = not password_is_required or not self.username
-        self._ascii_check.skip = not password_is_required
-
-        # and rerun the checks
-        self.checker.run_checks()
-
     def on_password_icon_clicked(self, entry, icon_pos, event):
         """Called by Gtk callback when the icon of a password entry is clicked."""
         set_password_visibility(entry, not entry.get_visibility())
@@ -544,12 +309,6 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler):
         """Called by Gtk on all username changes."""
         new_username = editable.get_text()
 
-        # Disable the advanced user dialog button when no username is set
-        if editable.get_text():
-            self._advanced_button.set_sensitive(True)
-        else:
-            self._advanced_button.set_sensitive(False)
-
         # update the username in checker
         self.checker.username = new_username
 
@@ -561,37 +320,6 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler):
         # Re-run the password checks against the new username
         self.checker.run_checks()
 
-    def on_full_name_changed(self, editable, data=None):
-        """Called by Gtk callback when the full name field changes."""
-
-        fullname = editable.get_text()
-        if self.guesser:
-            username = guess_username(fullname)
-            with blockedHandler(self.username_entry, self.on_username_set_by_user):
-                self.username = username
-
-        self.checker.fullname = fullname
-
-        # rerun the checks
-        self.checker.run_checks()
-
-    def on_admin_toggled(self, togglebutton, data=None):
-        # Add or remove user admin status based on changes to the admin checkbox
-        self.user.set_admin_priviledges(togglebutton.get_active())
-
-    def on_advanced_clicked(self, _button, data=None):
-        """Handler for the Advanced.. button. It starts the Advanced dialog
-        for setting homedir, uid, gid and groups.
-        """
-
-        self.user.name = self.username
-
-        self._advanced_user_dialog.refresh()
-        with self.main_window.enlightbox(self._advanced_user_dialog.window):
-            self._advanced_user_dialog.run()
-
-        self._admin_checkbox.set_active(self.user.has_admin_priviledges())
-
     def _checks_done(self, error_message):
         """Update the warning with the input validation error from the first
            error message or clear warnings if all the checks were successful.
@@ -603,7 +331,6 @@ class UserSpoke(FirstbootSpokeMixIn, NormalSpoke, GUISpokeInputCheckHandler):
         # check if an unwaivable check failed
         unwaivable_checks = [not self._confirm_check.result.success,
                              not self._username_check.result.success,
-                             not self._fullname_check.result.success,
                              not self._empty_check.result.success]
 
         # with allow_empty == False the empty password check become unwaivable
-- 
2.25.2
